steps:
  - name: python
    id: "Setup Python and install project requirements"
    entrypoint: pip
    args: ["install", "-r", "requirements.txt", "--user"]
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Pull container from dockerhub'
    args: ['pull', 'onsdigital/cir:${BRANCH_NAME}']
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Tag the container with SHA'
    args: ['tag', 'onsdigital/cir:${BRANCH_NAME}', 'gcr.io/${PROJECT_ID}/cir/cir:${SHORT_SHA}']
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push SHA tagged container to GCR'
    args: ['push', 'gcr.io/${PROJECT_ID}/cir/cir:${SHORT_SHA}']
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy the container to cloudrun'
    args: [ 'run', 'deploy', 'cir', '--image', 'gcr.io/${PROJECT_ID}/cir/cir:${SHORT_SHA}',
            '--region', $LOCATION, '--allow-unauthenticated', '--ingress', 'internal-and-cloud-load-balancing' ]
  - name: "gcr.io/cloud-builders/gcloud"
    id: "Retrieve `OAUTH_BRAND_NAME` and save it to workspace"
    entrypoint: sh
    args:
      - "-c"
      - |
        gcloud iap oauth-brands list --format='value(name)' --limit=1 --project=${PROJECT_ID} \
        > /workspace/oauth_brand_name

  - name: "gcr.io/cloud-builders/gcloud"
    id: "Retrieve `OAUTH_CLIENT_NAME` and save it to workspace"
    entrypoint: sh
    args:
      - "-c"
      - |
        gcloud iap oauth-clients list $(cat /workspace/oauth_brand_name) --format='value(name)' \
        --limit=1 \
        > /workspace/oauth_client_name

  - name: python
    id: "pytest integration tests"
    # gcloud returns OAUTH_CLIENT_NAME as '$OAUTH_BRAND_NAME/identityAwareProxy/OAUTH_CLIENT_ID'
    # so we have to split by / and use the last part of the string here to get OAUTH_CLIENT_ID
    entrypoint: sh
    args:
      - "-c"
      - |
        export DEFAULT_HOSTNAME=${_SSL_CERTIFICATE_DOMAIN}
        export CI_STORAGE_BUCKET_NAME=${PROJECT_ID}
        OAUTH_CLIENT_NAME=$(cat /workspace/oauth_client_name)
        export OAUTH_CLIENT_ID=${OAUTH_CLIENT_NAME##*/}
        export PROJECT_ID=${PROJECT_ID}
        export TOPIC_ID=${_TOPIC_ID}
        export URL_SCHEME=https
        make integration-tests

options:
  logging: CLOUD_LOGGING_ONLY
