steps:
  - name: python:3.11
    id: "Upgrade pip"
    entrypoint: "python"
    args: ["-m", "pip", "install", "--upgrade", "pip", "--user"]
  - name: python:3.11
    id: "Setup Python and install project requirements"
    entrypoint: pip
    args: ["install", "-r", "requirements.txt", "--user"]

  - name: python:3.11
    id: "Audit packages"
    entrypoint: sh
    args:
      - "-c"
      - |
        make audit

  - name: python:3.11
    id: "Check linting and code formatting"
    entrypoint: sh
    args:
      - "-c"
      - |
        make lint-check

  - name: python:3.11
    id: "Run unit tests"
    entrypoint: sh
    args:
      - "-c"
      - |
        export CI_STORAGE_BUCKET_NAME=${_CI_STORAGE_BUCKET_NAME}
        export FIRESTORE_DB_NAME=${_FIRESTORE_DB_NAME}
        export PROJECT_ID=${PROJECT_ID}
        make unit-tests

  - name: docker
    id: "Build and push docker image"
    entrypoint: sh
    args:
      - "-c"
      - |
        docker build -t "europe-west2-docker.pkg.dev/${PROJECT_ID}/cir/cir:${SHORT_SHA}" -t "europe-west2-docker.pkg.dev/${PROJECT_ID}/cir/cir:latest" .
        docker push "europe-west2-docker.pkg.dev/${PROJECT_ID}/cir/cir:${SHORT_SHA}"
        docker push "europe-west2-docker.pkg.dev/${PROJECT_ID}/cir/cir:latest"

  - name: "gcr.io/cloud-builders/gcloud"
    id: "Show image vulnerabilities (ons-sds-dev only)"
    entrypoint: bash
    args:
      - "-c"
      - |
        gcloud alpha artifacts docker images describe europe-west2-docker.pkg.dev/${PROJECT_ID}/cir/cir:latest \
          --show-package-vulnerability --format=json | tee /dev/fd/2 > vulnerability_report.txt

  - name: "gcr.io/cloud-builders/gcloud"
    id: "Check for critical vulnerabilities (ons-sds-dev only)"
    entrypoint: bash
    args:
      - "-c"
      - |
        apt-get -y update && apt-get install -y jq
        if jq -e '.package_vulnerability_summary.vulnerabilities.CRITICAL[] | select(.kind == "VULNERABILITY" and .vulnerability.severity == "CRITICAL")' vulnerability_report.txt > /dev/null; then
          echo "Error: Critical vulnerability found with image" >&2
          exit 1
        fi

  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "Deploy docker image to cloud run"
    entrypoint: gcloud
    args:
      [
        "run",
        "deploy",
        "cir",
        "--image",
        "europe-west2-docker.pkg.dev/${PROJECT_ID}/cir/cir:${SHORT_SHA}",
        "--region",
        "europe-west2",
        "--allow-unauthenticated",
        "--ingress",
        "internal-and-cloud-load-balancing",
        "--update-env-vars",
        "CIR_APPLICATION_VERSION=development",
      ]

  - name: "gcr.io/cloud-builders/gcloud"
    id: "Retrieve `OAUTH_BRAND_NAME` and save it to workspace"
    entrypoint: sh
    args:
      - "-c"
      - |
        gcloud iap oauth-brands list --format='value(name)' --limit=1 --project=${PROJECT_ID} \
        > /workspace/oauth_brand_name

  - name: "gcr.io/cloud-builders/gcloud"
    id: "Retrieve `OAUTH_CLIENT_NAME` and save it to workspace"
    entrypoint: sh
    args:
      - "-c"
      - |
        gcloud iap oauth-clients list $(cat /workspace/oauth_brand_name) --format='value(name)' \
        --limit=1 \
        > /workspace/oauth_client_name

  - name: python:3.11
    id: "pytest integration tests"
    # gcloud returns OAUTH_CLIENT_NAME as '$OAUTH_BRAND_NAME/identityAwareProxy/OAUTH_CLIENT_ID'
    # so we have to split by / and use the last part of the string here to get OAUTH_CLIENT_ID
    entrypoint: sh
    args:
      - "-c"
      - |
        export DEFAULT_HOSTNAME=${_SSL_CERTIFICATE_DOMAIN}
        export FIRESTORE_DB_NAME=${_FIRESTORE_DB_NAME}
        export CI_STORAGE_BUCKET_NAME=${_CI_STORAGE_BUCKET_NAME}
        OAUTH_CLIENT_NAME=$(cat /workspace/oauth_client_name)
        export OAUTH_CLIENT_ID=${OAUTH_CLIENT_NAME##*/}
        export PROJECT_ID=${PROJECT_ID}
        export TOPIC_ID=${_TOPIC_ID}
        export URL_SCHEME=https
        make integration-tests
options:
  logging: CLOUD_LOGGING_ONLY
