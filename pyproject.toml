[tool.poetry]
name = "cir"
version = "0.1.0"
description = "Colletion Instrument Repository"
authors = ["ONSdigital"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi="^0.111.0"
annotated-types="^0.5.0"
anyio="^3.7.1"
appdirs="^1.4.4"
CacheControl="^0.13.1"
cachetools="^5.3.1"
certifi="^2024.7.4"
charset-normalizer="^3.2.0"
click="^8.1.6"
defusedxml="^0.7.1"
dill="^0.3.7"
firebase_admin="^6.1.0"
filelock="^3.12.2"
fs="^2.4.16"
google-api-core="^2.11.1"
google-auth="^2.22.0"
google-cloud-core="^2.3.3"
google-cloud-firestore="^2.11.1"
google-cloud-pubsub="^2.18.1"
google-cloud-storage="^2.10.0"
google-crc32c="^1.3.0"
google-resumable-media="^2.5.0"
googleapis-common-protos="^1.60.0"
grpc-google-iam-v1="^0.12.6"
grpcio="^1.56.2"
grpcio-status="^1.56.2"
h11="^0.14.0"
html5lib="^1.1"
httpcore="^0.17.3"
httpx="^0.24.1"
idna="^3.7"
iniconfig="^2.0.0"
lazy-object-proxy="^1.9.0"
markdown-it-py="^3.0.0"
mccabe="^0.7.0"
mdurl="^0.1.2"
msgpack="^1.0.5"
packageurl-python="^0.11.2"
packaging="^23.1"
pathspec="^0.11.2"
platformdirs="^3.10.0"
pluggy="^1.2.0"
proto-plus="^1.22.3"
protobuf="^4.23.4"
py-serializable="^0.11.1"
pyaml="^23.7.0"
pyasn1="^0.5.0"
pyasn1-modules="^0.3.0"
pycodestyle="^2.11.0"
pydantic="^2.7.1"
pydantic-settings="^2.2.1"
pydantic_core="^2.18.2"
pyflakes="^3.1.0"
Pygments="^2.16.1"
pyparsing="^3.1.1"
python-dotenv="^1.0.0"
PyYAML="^6.0.1"
requests="^2.32.0"
rich="^13.5.2"
rsa="^4.9"
six="^1.16.0"
sniffio="^1.3.0"
sortedcontainers="^2.4.0"
starlette="^0.37.2"
toml="^0.10.2"
tomlkit="^0.12.1"
typing_extensions="^4.8.0"
urllib3="^1.26.19"
uvicorn="^0.23.2"
webencodings="^0.5.1"
wrapt="^1.15.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.1"
pytest-cov="^4.0.0"
pytest-mock="^3.11.1"
pytest-xdist = "^3.6.1"
coverage="^7.2.2"
mock-firestore="^0.11.0"
gcp-storage-emulator="^2022.6.11"
# :TODO: Remove pylint when ruff supports all pylint rules
# :TODO: Remove black when ruff supports all black rules
pylint = "^3.2.3"
black = "^24.4.2"
ruff = "^0.4.8"
mypy = "^1.10.0"
flake8="^6.1.0"
pip-api="^0.0.30"
pip-requirements-parser="^32.0.1"

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
select = [
    # Enabling ALL is not recommended it will implicitly enable new rules after upgrade.
    # "ALL",

    # Ruff rules: https://docs.astral.sh/ruff/rules/

    "E",      # pycodestyle erros
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "UP",     # pyupgrade
    "I",      # isort
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "C4",     # flake8-comprehensions
    "S",      # flake8-bandit
    "D",      # pydocstyle - Enforce existing docstrings only
    "C90",    # mccabe
    "RUF",    # Ruff specific rules

    # PL - Pylint is only partially supported, we also use the pylint tool to catch all the rules.
    # It is enabled here to take advantage of the ruff's speed.
    "PL",
]

ignore = [
    # Conflicts with google docstring style
    "D205",
    # Allow missing docstring, remove to enforce docstrings across the board
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    # Disable line length check as it is handled by black
    # :TODO: Remove E501 when ruff supports all black rules
    "E501",
    # indentation contains tabs
    "W191",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # Allow use of assert statements in tests
    "S101",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
# Global mypy options
no_implicit_optional = "True"
ignore_missing_imports = "True"
warn_unused_configs = "True"
warn_no_return = "False"
warn_unused_ignores = "True"
warn_return_any = "True"
warn_redundant_casts = "True"
disallow_untyped_defs = "True"
disallow_untyped_calls = "True"
disallow_incomplete_defs = "True"
strict_equality = "True"